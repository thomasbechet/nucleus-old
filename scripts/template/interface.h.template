#ifndef {{ module.namespace|upper }}_INTERFACE_H
#define {{ module.namespace|upper }}_INTERFACE_H

#include <nucleus/nucleus.h>
{%- for header in module.include_headers %}
#include <{{ header }}>
{%- endfor %}

/* module */
#define {{ module.namespace|upper }}_MODULE_NAME "{{ module.name }}"
#define {{ module.namespace|upper }}_MODULE_ID {{ module.id }}

/* interface */
{%- for interface in module.interfaces %}
#define {{ module.namespace|upper }}_{{ interface.name|upper }}_INTERFACE_NAME "{{ module.namespace }}_{{ interface.name }}_interface"

typedef struct {
    {%- for function in interface.functions %}
    nu_result_t (*{{ function.name }})({{ function.parameters|map(attribute='type')|join(', ') }});
    {%- endfor %}
} {{ module.namespace }}_{{ interface.name }}_interface_t;
{%- endfor %}

/* plugin */
{%- for plugin in module.plugins %}
#define {{ module.namespace|upper }}_{{ plugin.name|upper }}_PLUGIN_NAME "{{ module.namespace }}_{{ plugin.name }}_plugin"
{%- endfor %}

/* loader */
#ifndef {{ module.namespace|upper }}_LOADER_IMPLEMENTATION
    {%- for interface in module.interfaces %}
    {{ module.namespace }}_{{ interface.name }}_interface_t _{{ module.namespace }}_{{ interface.name }}_interface;
    nu_result_t {{ module.namespace }}_{{ interface.name }}_interface_load(nu_module_t module)
    {
        return nu_module_get_interface(module, {{ module.namespace|upper }}_{{ interface.name|upper }}_INTERFACE_NAME, &_{{ module.namespace }}_{{ interface.name }}_interface);
    }
    {%- endfor %}
#elif
    {%- for interface in module.interfaces %}
    extern {{ module.namespace }}_{{ interface.name }}_interface_t _{{ module.namespace }}_{{ interface.name }}_interface;
    nu_result_t {{ module.namespace }}_{{ interface.name }}_interface_load(nu_module_t module);
    {%- endfor %}
#endif

/* macro */
{%- for interface in module.interfaces %}
{%- for function in interface.functions %}
#define {{ module.namespace }}_{{ interface.name }}_{{ function.name }}({{ function.parameters|map(attribute='name')|join(', ') }}) _{{ module.namespace }}_{{ interface.name }}_interface.{{ function.name }}({{ function.parameters|map(attribute='name')|join(', ') }})
{%- endfor %}
{%- endfor %}

#endif