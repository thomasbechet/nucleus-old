#version 450 core

layout(set = 0, binding = 0) uniform EnvironmentUBO {
    mat4 VPMatrix;
    vec3 eye;
};

layout(set = 1, binding = 0, rgba16f) uniform readonly image2D imageNormalDepth;
layout(set = 1, binding = 1, rgba16f) uniform writeonly image2D imageLight;

__INJECT_CONSTANTS__

layout(local_size_x = 32, local_size_y = 32) in;
void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    vec4 normalDepth  = imageLoad(imageNormalDepth, pos);

    vec4 color = vec4(0);

    if (normalDepth.w < MAX_DISTANCE) {
        const vec3 backgroundColor = vec3(1., 163., 236.) / vec3(500);
        color = vec4(1.0) * max(0, dot(normalDepth.xyz, normalize(vec3(1, 1, 0))));
        color += backgroundColor.xyzz * 0.2;
    } 
    
    // else {

        
    //     vec4 ptransform = inverse(VPMatrix) * vec4(pos, 1, 1);
    //     vec3 dir = normalize((ptransform / ptransform.w).xyz - eye);

    //     const vec3 backgroundColor = vec3(1., 163., 236.) / vec3(500);
    //     color = vec4(backgroundColor + abs(1.0 - dir.y) * 0.4, 1.0);
    // }

    imageStore(imageLight, pos, color);
}